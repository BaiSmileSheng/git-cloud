package ${packageName}.controller;
import com.cloud.common.log.annotation.OperLog;
import com.cloud.common.log.enums.BusinessType;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import tk.mybatis.mapper.entity.Example;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.cloud.common.core.domain.R;
import com.cloud.common.core.controller.BaseController;
import ${packageName}.domain.entity.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import com.cloud.common.core.page.TableDataInfo;
import java.util.List;
/**
 * ${functionName} 提供者
 *
 * @author ${author}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service ${className}Service;

    /**
     * 查询${functionName}
     */
    @GetMapping("get")
    @ApiOperation(value = "根据id查询${functionName}", response = ${ClassName}.class)
    public R get(${pkColumn.javaType} ${pkColumn.javaField}) {
        return R.data(${className}Service.selectByPrimaryKey(${pkColumn.javaField}));

    }

    /**
     * 查询${functionName}列表
     */
    @GetMapping("list")
    @ApiOperation(value = "${functionName}查询分页", response = ${ClassName}.class)
    @ApiImplicitParams({
            @ApiImplicitParam(name = "pageNum", value = "当前记录起始索引", required =true, paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = "pageSize", value = "每页显示记录数", required = true,paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = "sortField", value = "排序列", required = false,paramType = "query", dataType = "String"),
            @ApiImplicitParam(name = "sortOrder", value = "排序的方向", required = false,paramType = "query", dataType = "String")
    })
    public TableDataInfo list(${ClassName} ${className}) {
        Example example = new Example(${ClassName}.class);
        Example.Criteria criteria = example.createCriteria();
        startPage();
        List<${ClassName}> ${className}List = ${className}Service.selectByExample(example);
        return getDataTable(${className}List);
    }


    /**
     * 新增保存${functionName}
     */
    @PostMapping("save")
    @OperLog(title = "新增保存${functionName}", businessType = BusinessType.INSERT)
    @ApiOperation(value = "新增保存${functionName}", response = R.class)
    public R addSave(@RequestBody ${ClassName} ${className}) {
        ${className}Service.insertSelective(${className});
        return R.data(${className}.getId());
    }

    /**
     * 修改保存${functionName}
     */
    @PostMapping("update")
    @OperLog(title = "修改保存${functionName}", businessType = BusinessType.UPDATE)
    @ApiOperation(value = "修改保存${functionName}", response = R.class)
    public R editSave(@RequestBody ${ClassName} ${className}) {
        return toAjax(${className}Service.updateByPrimaryKeySelective(${className}));
    }

    /**
     * 删除${functionName}
     */
    @PostMapping("remove")
    @OperLog(title = "删除${functionName}", businessType = BusinessType.DELETE)
    @ApiOperation(value = "删除${functionName}", response = R.class)
    @ApiParam(name = "ids", value = "需删除数据的id")
    public R remove(@RequestBody String ids) {
        return toAjax(${className}Service.deleteByIds(ids));
    }

}
